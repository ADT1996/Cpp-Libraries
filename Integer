#ifndef ADT_INTH
#define ADT_INTH

#include<AbsNaturalNumeric>

class Integer : public AbsNaturalNumeric<int> {
	public:
#if CURRENTOS == 64
		static const int MAXVALUE = 2147483646;
		static const int MINVALUE = -2147483647;
#elif CURRENTOS == 32
		static const int MAXVALUE = 32766;
		static const int MINVALUE = -32767;
#endif

		Integer() : AbsNaturalNumeric(0) {
		}

		template<class U> Integer(U value) : AbsNaturalNumeric(value) {
		}

		template<class U> Integer(AbsNumeric<U> value) : AbsNaturalNumeric(value.get()) {
		}

		virtual bool equal(Object *object) {
			if(object == null) return false;
			if(typeid(AbsNumeric) == typeid(object))
				if((*value) == ((AbsNumeric*)object)->get()) return true;
			return false;
		}

		static string getClassName() {
			return string("Integer");
		}
};

#endif
